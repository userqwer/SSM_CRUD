<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
                                        <!-- Spring的配置文件，这里主要配置和业务逻辑有关的 -->
                                        <!--数据源，事务控制。AOP,MyBatis的整合...-->

<!--扫描包-->
    <context:component-scan base-package="su.ssm.crud" >
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

<!--引入外部文件并配置数据源-->
    <context:property-placeholder location="classpath:dbconfig.properties"></context:property-placeholder>
    <bean id="pooledDataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="url" value="${jdbc.url}"></property>
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="username" value="${jdbc.user}"></property>
        <property name="password" value="${jdbc.password}"></property>
     </bean>

    <!--================== 配置和MyBatis的整合=============== -->
    <!--让ioc一启动就代替我们创建SqlSessionFactory工厂对象-->
    <bean id="SqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
    <!--注入数据源-->
        <property name="dataSource" ref="pooledDataSource"></property>
    </bean>

    <!-- 配置扫描器，将mybatis接口的实现加入到ioc容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--扫描所有dao接口的实现，加入到ioc容器中 --><!--接口的包名-->
        <property name="basePackage" value="su.ssm.crud.dao"></property>
    </bean>

    <!-- ===============事务控制的配置(非常重要) ================-->
    <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--控制连接池里的所有连接--><!--开启关闭回滚操作--><!--告诉数据源用的是哪个-->
        <property name="dataSource" ref="pooledDataSource"></property>
    </bean>

    <!--开启基于注解的事务，使用xml配置形式的事务（必要主要的都是使用配置式）  -->
    <!--在 spring 配置文件中配置切入点-->
    <aop:config>
        <!--service后的两个点表示所有子包，*表示所有方法，(..)表示任意个参数-->
        <aop:pointcut id="txPoint" expression="execution(* su.ssm.crud.service..*(..))"/>
        <!--advice-ref表示用它指定的规则表明事物如何切入，pointcut-ref表示切入哪些方法-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"></aop:advisor>
    </aop:config>

    <!--txPoint切入点切入之后，该如何切，每个方法该怎么办，要看下面的配置-->
    <!--配置事务增强(通知)，事务如何切入  -->
    <!--transaction-manager:表示用这个事物transaction-manager来控制事物,即将下面的和事物管理器产生联系-->
    <tx:advice id="txAdvice" transaction-manager="dataSourceTransactionManager">
        <tx:attributes>
            <tx:method name="*"/>
            <tx:method name="get*" read-only="true"></tx:method>
        </tx:attributes>
    </tx:advice>

<!--生成批量操作的sqlsession-->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="SqlSessionFactory"></constructor-arg>
        <constructor-arg name="executorType" value="BATCH"></constructor-arg>
    </bean>
    <!-- Spring配置文件的核心点（数据源、与mybatis的整合，事务控制） -->
</beans>